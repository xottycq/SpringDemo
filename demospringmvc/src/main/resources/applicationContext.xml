<?xml version="1.0" encoding="UTF-8"?>
<!--
对J2EE三层架构中的service和dao层进行配置
-->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-4.0.xsd
   http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    <!--1.配置自动扫描注解:排除controller-->
    <context:component-scan base-package="com.example.demospringmvc">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>

    <!-- 2.导入外部的properties配置文件 -->
    <context:property-placeholder location="classpath:jdbcH2.properties" />

    <!--3.配置数据源(数据库连接池) -->
    <bean id="dataSource" class=
            "org.springframework.jdbc.datasource.DriverManagerDataSource">
        <!--数据库驱动 -->
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
    <!-- 4.1.事务管理器，依赖于数据源 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!-- 4.2.注册事务管理器驱动 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 5.1-1配置JDBC模板 -->
    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <!-- 默认必须使用数据源 -->
        <property name="dataSource" ref="dataSource" />
    </bean>
    <!--5.1-2配置使用JDBC模板的Dao，也可以用注解来代替，见UserDao-->
    <bean id="accountDao_jdbctemplate" class="com.example.demospringmvc.dao.AccountDao" depends-on="dataSource">
        <property name="jdbcTemplate" ref="jdbcTemplate"/>
    </bean>

    <!--5.2-1 配置mybatis之SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 引用数据源组件 -->
        <property name="dataSource" ref="dataSource" />
        <!-- 还可以引用MyBatis专属配置文件中的配置 -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />

        <!-- sql映射文件路径，可代替mybatis-config中的mappers设置 -->
        <!-- <property name="mapperLocations" value="classpath:mapper/*.xml"/>-->
    </bean>


    <!--5.2-2 配置使用SqlSessionTemplate(可选，在使用注解时常用到到) -->
    <bean id="sqlsessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg index="0" ref="sqlSessionFactory" />
    </bean>

    <!--5.2-3 配置mapper接口
    <bean id="accountDao_mybatis" class="org.mybatis.spring.mapper.MapperFactoryBean"-
       <property name="mapperInterface" value="com.example.demospringmvc.dao.IAccountDao"/>
       <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
        与sqlSessionFactory二选一配置&
       <property name="sqlSessionTemplate" ref="sqlsessionTemplate"/>
    </bean>
    -->

    <!--5.2-3 配置Dao（xml） -->
    <!--xml方式-->
    <bean id="accountDao_mybatis" class="com.example.demospringmvc.dao.AccountDaoByMybatis">
        <property name="sqlSessionTemplate" ref="sqlsessionTemplate"/>
    </bean>
    <!--5.2-3 配置Dao（注解扫描）-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.example.demospringmvc.dao"/>
    </bean>
</beans>